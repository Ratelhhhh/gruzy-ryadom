package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/joho/godotenv"
	"gopkg.in/telebot.v3"
	"gruzy-ryadom/internal/db"
	"gruzy-ryadom/internal/models"
	"gruzy-ryadom/internal/service"
)

type Bot struct {
	bot     *telebot.Bot
	service *service.Service
}

func NewBot(token string, service *service.Service) (*Bot, error) {
	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	bot, err := telebot.NewBot(pref)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	return &Bot{
		bot:     bot,
		service: service,
	}, nil
}

func (b *Bot) Start() {
	// Driver bot commands
	b.bot.Handle("/start", b.handleStart)
	b.bot.Handle("/help", b.handleHelp)
	b.bot.Handle("/orders", b.handleOrders)
	b.bot.Handle("/create_order", b.handleCreateOrder)
	b.bot.Handle("/profile", b.handleProfile)

	// Admin bot commands
	b.bot.Handle("/admin", b.handleAdmin)
	b.bot.Handle("/customers", b.handleCustomers)
	b.bot.Handle("/stats", b.handleStats)

	// Inline handlers
	b.bot.Handle(telebot.OnText, b.handleText)
	b.bot.Handle(telebot.OnCallback, b.handleCallback)

	log.Println("Bot started...")
	b.bot.Start()
}

func (b *Bot) handleStart(c telebot.Context) error {
	user := c.Sender()
	
	// Check if user exists
	customer, err := b.service.GetCustomerByTelegramID(context.Background(), user.ID)
	if err != nil {
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")
	}

	if customer == nil {
		// Create new customer
		input := models.CreateCustomerInput{
			Name:       user.FirstName + " " + user.LastName,
			Phone:      "", // Will be asked later
			TelegramID: &user.ID,
		}
		if user.Username != "" {
			input.TelegramTag = &user.Username
		}

		_, err = b.service.CreateCustomer(context.Background(), input)
		if err != nil {
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
		}
	}

	msg := `üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ì—Ä—É–∑—ã —Ä—è–¥–æ–º"!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã
/create_order - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–º–æ—â—å`

	return c.Send(msg)
}

func (b *Bot) handleHelp(c telebot.Context) error {
	msg := `üìã –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã
/create_order - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_order –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.`

	return c.Send(msg)
}

func (b *Bot) handleOrders(c telebot.Context) error {
	filter := models.OrderFilter{
		Page:  1,
		Limit: 10,
	}

	orders, total, err := b.service.ListOrders(context.Background(), filter)
	if err != nil {
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
	}

	if len(orders) == 0 {
		return c.Send("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
	}

	var msg strings.Builder
	msg.WriteString(fmt.Sprintf("üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: %d\n\n", total))

	for i, order := range orders {
		msg.WriteString(fmt.Sprintf("%d. %s\n", i+1, order.Title))
		msg.WriteString(fmt.Sprintf("   –í–µ—Å: %.1f –∫–≥\n", order.WeightKg))
		msg.WriteString(fmt.Sprintf("   –¶–µ–Ω–∞: %.0f ‚ÇΩ\n", order.Price))
		if order.FromLocation != nil {
			msg.WriteString(fmt.Sprintf("   –û—Ç–∫—É–¥–∞: %s\n", *order.FromLocation))
		}
		if order.ToLocation != nil {
			msg.WriteString(fmt.Sprintf("   –ö—É–¥–∞: %s\n", *order.ToLocation))
		}
		msg.WriteString("\n")
	}

	return c.Send(msg.String())
}

func (b *Bot) handleCreateOrder(c telebot.Context) error {
	msg := `üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
–í–µ—Å (–∫–≥)
–¶–µ–Ω–∞ (‚ÇΩ)
–û—Ç–∫—É–¥–∞
–ö—É–¥–∞
–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

–ü—Ä–∏–º–µ—Ä:
–ü–µ—Ä–µ–≤–µ–∑—Ç–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫
70
5000
–ú–æ—Å–∫–≤–∞
–ö–∞–∑–∞–Ω—å
–¢–æ–Ω–∫–æ—Å—Ç–∏: –≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–æ—è`

	return c.Send(msg)
}

func (b *Bot) handleProfile(c telebot.Context) error {
	user := c.Sender()
	
	customer, err := b.service.GetCustomerByTelegramID(context.Background(), user.ID)
	if err != nil {
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
	}

	if customer == nil {
		return c.Send("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
	}

	msg := fmt.Sprintf(`üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

–ò–º—è: %s
–¢–µ–ª–µ—Ñ–æ–Ω: %s`, customer.Name, customer.Phone)

	if customer.TelegramTag != nil {
		msg += fmt.Sprintf("\nTelegram: @%s", *customer.TelegramTag)
	}

	return c.Send(msg)
}

func (b *Bot) handleAdmin(c telebot.Context) error {
	// Simple admin check - in production you should have proper admin management
	adminIDs := []int64{123456789} // Replace with actual admin IDs
	
	isAdmin := false
	for _, id := range adminIDs {
		if c.Sender().ID == id {
			isAdmin = true
			break
		}
	}

	if !isAdmin {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.")
	}

	msg := `üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/customers - –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`

	return c.Send(msg)
}

func (b *Bot) handleCustomers(c telebot.Context) error {
	filter := models.CustomerFilter{
		Page:  1,
		Limit: 10,
	}

	customers, total, err := b.service.ListCustomers(context.Background(), filter)
	if err != nil {
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.")
	}

	if len(customers) == 0 {
		return c.Send("–ó–∞–∫–∞–∑—á–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
	}

	var msg strings.Builder
	msg.WriteString(fmt.Sprintf("üë• –ó–∞–∫–∞–∑—á–∏–∫–æ–≤: %d\n\n", total))

	for i, customer := range customers {
		msg.WriteString(fmt.Sprintf("%d. %s\n", i+1, customer.Name))
		msg.WriteString(fmt.Sprintf("   –¢–µ–ª–µ—Ñ–æ–Ω: %s\n", customer.Phone))
		msg.WriteString(fmt.Sprintf("   Telegram: @%s\n", *customer.TelegramTag))
		msg.WriteString("\n")
	}

	return c.Send(msg.String())
}

func (b *Bot) handleStats(c telebot.Context) error {
	// Simple stats - in production you should implement proper statistics
	msg := `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ó–∞–∫–∞–∑–æ–≤: 0
–ó–∞–∫–∞–∑—á–∏–∫–æ–≤: 0
–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: 0`

	return c.Send(msg)
}

func (b *Bot) handleText(c telebot.Context) error {
	// Handle text input for order creation
	text := c.Text()
	
	// Simple order creation from text
	// In production you should implement proper state management
	if strings.Contains(text, "–∫–≥") || strings.Contains(text, "‚ÇΩ") {
		return c.Send("–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
	}

	return nil
}

func (b *Bot) handleCallback(c telebot.Context) error {
	// Handle inline keyboard callbacks
	return nil
}

func main() {
	if err := godotenv.Load(); err != nil {
		log.Println("No .env file found")
	}

	// Database connection
	dbURL := os.Getenv("DATABASE_URL")
	if dbURL == "" {
		log.Fatal("DATABASE_URL is required")
	}

	database, err := db.New(dbURL)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer database.Close()

	// Service layer
	svc := service.New(database)

	// Bot token
	botToken := os.Getenv("DRIVER_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("DRIVER_BOT_TOKEN is required")
	}

	// Create and start bot
	bot, err := NewBot(botToken, svc)
	if err != nil {
		log.Fatalf("Failed to create bot: %v", err)
	}

	bot.Start()
}
