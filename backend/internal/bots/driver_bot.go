package bots

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"gopkg.in/telebot.v3"
	"gruzy-ryadom/internal/models"
	"gruzy-ryadom/internal/service"
)

type DriverBot struct {
	bot     *telebot.Bot
	service *service.Service
	ctx     context.Context
	cancel  context.CancelFunc
}

func NewDriverBot(token string, service *service.Service) (*DriverBot, error) {
	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	bot, err := telebot.NewBot(pref)
	if err != nil {
		return nil, fmt.Errorf("failed to create driver bot: %w", err)
	}

	ctx, cancel := context.WithCancel(context.Background())

	return &DriverBot{
		bot:     bot,
		service: service,
		ctx:     ctx,
		cancel:  cancel,
	}, nil
}

func (b *DriverBot) Start() {
	// Driver bot commands
	b.bot.Handle("/start", b.handleStart)
	b.bot.Handle("/help", b.handleHelp)
	b.bot.Handle("/orders", b.handleOrders)
	b.bot.Handle("/create_order", b.handleCreateOrder)
	b.bot.Handle("/profile", b.handleProfile)

	// Inline handlers
	b.bot.Handle(telebot.OnText, b.handleText)
	b.bot.Handle(telebot.OnCallback, b.handleCallback)

	log.Println("Driver Bot started...")
	b.bot.Start()
}

func (b *DriverBot) Stop() {
	b.cancel()
	b.bot.Stop()
}

func (b *DriverBot) handleStart(c telebot.Context) error {
	user := c.Sender()
	
	// Check if user exists
	customer, err := b.service.GetCustomerByTelegramID(b.ctx, user.ID)
	if err != nil {
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")
	}

	if customer == nil {
		// Create new customer
		input := models.CreateCustomerInput{
			Name:       user.FirstName + " " + user.LastName,
			Phone:      "", // Will be asked later
			TelegramID: &user.ID,
		}
		if user.Username != "" {
			input.TelegramTag = &user.Username
		}

		_, err = b.service.CreateCustomer(b.ctx, input)
		if err != nil {
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
		}
	}

	msg := `üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ì—Ä—É–∑—ã —Ä—è–¥–æ–º"!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã
/create_order - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–º–æ—â—å`

	return c.Send(msg)
}

func (b *DriverBot) handleHelp(c telebot.Context) error {
	msg := `üìã –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã
/create_order - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_order –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.`

	return c.Send(msg)
}

func (b *DriverBot) handleOrders(c telebot.Context) error {
	filter := models.OrderFilter{
		Page:  1,
		Limit: 10,
	}

	orders, total, err := b.service.ListOrders(b.ctx, filter)
	if err != nil {
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
	}

	if len(orders) == 0 {
		return c.Send("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
	}

	var msg strings.Builder
	msg.WriteString(fmt.Sprintf("üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: %d\n\n", total))

	for i, order := range orders {
		msg.WriteString(fmt.Sprintf("%d. %s\n", i+1, order.Title))
		msg.WriteString(fmt.Sprintf("   –í–µ—Å: %.1f –∫–≥\n", order.WeightKg))
		msg.WriteString(fmt.Sprintf("   –¶–µ–Ω–∞: %.0f ‚ÇΩ\n", order.Price))
		if order.FromLocation != nil {
			msg.WriteString(fmt.Sprintf("   –û—Ç–∫—É–¥–∞: %s\n", *order.FromLocation))
		}
		if order.ToLocation != nil {
			msg.WriteString(fmt.Sprintf("   –ö—É–¥–∞: %s\n", *order.ToLocation))
		}
		msg.WriteString("\n")
	}

	return c.Send(msg.String())
}

func (b *DriverBot) handleCreateOrder(c telebot.Context) error {
	msg := `üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
–í–µ—Å (–∫–≥)
–¶–µ–Ω–∞ (‚ÇΩ)
–û—Ç–∫—É–¥–∞
–ö—É–¥–∞
–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

–ü—Ä–∏–º–µ—Ä:
–ü–µ—Ä–µ–≤–µ–∑—Ç–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫
70
5000
–ú–æ—Å–∫–≤–∞
–ö–∞–∑–∞–Ω—å
–¢–æ–Ω–∫–æ—Å—Ç–∏: –≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–æ—è`

	return c.Send(msg)
}

func (b *DriverBot) handleProfile(c telebot.Context) error {
	user := c.Sender()
	
	customer, err := b.service.GetCustomerByTelegramID(b.ctx, user.ID)
	if err != nil {
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
	}

	if customer == nil {
		return c.Send("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
	}

	msg := fmt.Sprintf(`üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

–ò–º—è: %s
–¢–µ–ª–µ—Ñ–æ–Ω: %s`, customer.Name, customer.Phone)

	if customer.TelegramTag != nil {
		msg += fmt.Sprintf("\nTelegram: @%s", *customer.TelegramTag)
	}

	return c.Send(msg)
}

func (b *DriverBot) handleText(c telebot.Context) error {
	// Handle text input for order creation
	text := c.Text()
	
	// Simple order creation from text
	// In production you should implement proper state management
	if strings.Contains(text, "–∫–≥") || strings.Contains(text, "‚ÇΩ") {
		return c.Send("–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
	}

	return nil
}

func (b *DriverBot) handleCallback(c telebot.Context) error {
	// Handle inline keyboard callbacks
	return nil
} 