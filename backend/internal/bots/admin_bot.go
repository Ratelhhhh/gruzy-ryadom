package bots

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"gopkg.in/telebot.v3"
	"gruzy-ryadom/internal/models"
	"gruzy-ryadom/internal/service"
)

type AdminBot struct {
	bot     *telebot.Bot
	service *service.Service
	ctx     context.Context
	cancel  context.CancelFunc
}

func NewAdminBot(token string, service *service.Service) (*AdminBot, error) {
	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	bot, err := telebot.NewBot(pref)
	if err != nil {
		return nil, fmt.Errorf("failed to create admin bot: %w", err)
	}

	ctx, cancel := context.WithCancel(context.Background())

	return &AdminBot{
		bot:     bot,
		service: service,
		ctx:     ctx,
		cancel:  cancel,
	}, nil
}

func (b *AdminBot) Start() {
	// Admin commands
	b.bot.Handle("/start", b.handleStart)
	b.bot.Handle("/help", b.handleHelp)
	b.bot.Handle("/customers", b.handleCustomers)
	b.bot.Handle("/orders", b.handleOrders)
	b.bot.Handle("/stats", b.handleStats)
	b.bot.Handle("/broadcast", b.handleBroadcast)

	log.Println("Admin Bot started...")
	b.bot.Start()
}

func (b *AdminBot) Stop() {
	b.cancel()
	b.bot.Stop()
}

func (b *AdminBot) handleStart(c telebot.Context) error {
	user := c.Sender()
	
	// Admin check
	adminIDs := []int64{123456789} // Replace with actual admin IDs
	
	isAdmin := false
	for _, id := range adminIDs {
		if user.ID == id {
			isAdmin = true
			break
		}
	}

	if !isAdmin {
		return c.Send("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
	}

	msg := `üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å "–ì—Ä—É–∑—ã —Ä—è–¥–æ–º"

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/customers - –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
/orders - –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/broadcast - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
/help - –ü–æ–º–æ—â—å`

	return c.Send(msg)
}

func (b *AdminBot) handleHelp(c telebot.Context) error {
	msg := `üìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/customers - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
/orders - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/broadcast - –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`

	return c.Send(msg)
}

func (b *AdminBot) handleCustomers(c telebot.Context) error {
	// Admin check
	adminIDs := []int64{123456789}
	isAdmin := false
	for _, id := range adminIDs {
		if c.Sender().ID == id {
			isAdmin = true
			break
		}
	}

	if !isAdmin {
		return c.Send("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
	}

	filter := models.CustomerFilter{
		Page:  1,
		Limit: 20,
	}

	customers, total, err := b.service.ListCustomers(b.ctx, filter)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.")
	}

	if len(customers) == 0 {
		return c.Send("üì≠ –ó–∞–∫–∞–∑—á–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
	}

	var msg strings.Builder
	msg.WriteString(fmt.Sprintf("üë• –ó–∞–∫–∞–∑—á–∏–∫–æ–≤: %d\n\n", total))

	for i, customer := range customers {
		msg.WriteString(fmt.Sprintf("%d. %s\n", i+1, customer.Name))
		msg.WriteString(fmt.Sprintf("   üìû %s\n", customer.Phone))
		if customer.TelegramTag != nil {
			msg.WriteString(fmt.Sprintf("   üì± @%s\n", *customer.TelegramTag))
		}
		msg.WriteString(fmt.Sprintf("   üìÖ %s\n", customer.CreatedAt.Format("02.01.2006")))
		msg.WriteString("\n")
	}

	return c.Send(msg.String())
}

func (b *AdminBot) handleOrders(c telebot.Context) error {
	// Admin check
	adminIDs := []int64{123456789}
	isAdmin := false
	for _, id := range adminIDs {
		if c.Sender().ID == id {
			isAdmin = true
			break
		}
	}

	if !isAdmin {
		return c.Send("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
	}

	filter := models.OrderFilter{
		Page:  1,
		Limit: 20,
	}

	orders, total, err := b.service.ListOrders(b.ctx, filter)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.")
	}

	if len(orders) == 0 {
		return c.Send("üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
	}

	var msg strings.Builder
	msg.WriteString(fmt.Sprintf("üì¶ –ó–∞–∫–∞–∑–æ–≤: %d\n\n", total))

	for i, order := range orders {
		msg.WriteString(fmt.Sprintf("%d. %s\n", i+1, order.Title))
		msg.WriteString(fmt.Sprintf("   ‚öñÔ∏è %.1f –∫–≥\n", order.WeightKg))
		msg.WriteString(fmt.Sprintf("   üí∞ %.0f ‚ÇΩ\n", order.Price))
		if order.FromLocation != nil {
			msg.WriteString(fmt.Sprintf("   üìç –û—Ç–∫—É–¥–∞: %s\n", *order.FromLocation))
		}
		if order.ToLocation != nil {
			msg.WriteString(fmt.Sprintf("   üéØ –ö—É–¥–∞: %s\n", *order.ToLocation))
		}
		msg.WriteString(fmt.Sprintf("   üìÖ %s\n", order.CreatedAt.Format("02.01.2006")))
		msg.WriteString("\n")
	}

	return c.Send(msg.String())
}

func (b *AdminBot) handleStats(c telebot.Context) error {
	// Admin check
	adminIDs := []int64{123456789}
	isAdmin := false
	for _, id := range adminIDs {
		if c.Sender().ID == id {
			isAdmin = true
			break
		}
	}

	if !isAdmin {
		return c.Send("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
	}

	// Get basic stats
	customers, _, err := b.service.ListCustomers(b.ctx, models.CustomerFilter{})
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
	}

	orders, _, err := b.service.ListOrders(b.ctx, models.OrderFilter{})
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
	}

	msg := fmt.Sprintf(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã

üë• –ó–∞–∫–∞–∑—á–∏–∫–æ–≤: %d
üì¶ –ó–∞–∫–∞–∑–æ–≤: %d
üìÖ –î–∞—Ç–∞: %s`, len(customers), len(orders), time.Now().Format("02.01.2006 15:04"))

	return c.Send(msg)
}

func (b *AdminBot) handleBroadcast(c telebot.Context) error {
	// Admin check
	adminIDs := []int64{123456789}
	isAdmin := false
	for _, id := range adminIDs {
		if c.Sender().ID == id {
			isAdmin = true
			break
		}
	}

	if !isAdmin {
		return c.Send("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
	}

	msg := `üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞–º.

–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel`

	return c.Send(msg)
} 